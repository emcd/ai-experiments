[build-system]
requires = [ 'hatchling' ]
build-backend = 'hatchling.build'

[project]
name = 'aiwb'
description = 'Workbench for interacting with multiple AI models in various modalities.'
dynamic = [ 'version' ]
license = 'Apache-2.0'
readme = { 'file' = 'README.md', 'content-type' = 'text/markdown' }
requires-python = '>= 3.10'
dependencies = [
  'accretive~=4.1',
  'aiofiles',
  'chardet',
  'exceptiongroup', # TODO: Python 3.11: Remove.
  'fastapi[standard]',
  'frigid~=4.1',
  'gitignorefile',
  'httpx',
  'icecream',
  'importlib-resources', # TODO: Python 3.12: Remove.
  'jsonschema',
  'mako', # TODO? Replace with Jinja2.
  'panel~=1.5.5',
  'platformdirs',
  'python-dotenv',
  'python-magic',
  'rich',
  'tomli', # TODO: Python 3.11: Remove.
  'tomli-w', # TODO? Remove. Use pretty JSON for machine-generated files.
  'typing-extensions',
  'tyro',
  'unstructured',

  # TODO: Install in environment context as needed.
  'anthropic',
  'openai',
  'tiktoken',
]
classifiers = [ # https://pypi.org/classifiers
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: Apache Software License',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: Implementation :: CPython',
  'Topic :: Software Development',
]
keywords = [ 'ai', 'llm', 'workbench', 'conversation' ]
[project.scripts]
aiwb-apiserver = 'aiwb.apiserver:main'
aiwb-appcore = 'aiwb.appcore:main'
aiwb-libcore = 'aiwb.libcore:main'
[project.gui-scripts]
aiwb = 'aiwb.gui:main'
[project.optional-dependencies]
chromadb = [
  'chromadb',
  'langchain-chroma',
  'langchain-openai', # Embeddings, for now.
]
faiss-cpu = [
  'faiss-cpu',
  'langchain-community',
  'langchain-openai', # Embeddings, for now.
]
experiments = [
  'aiwb[faiss-cpu,web-scraper]',
  'notebook',
  'pytesseract',
]
web-scraper = [
  'beautifulsoup4',
  'scrapy',
]
[[project.authors]]
name = 'Eric McDonald'
email = 'emcd@users.noreply.github.com'
[project.urls]
'Homepage' = 'https://github.com/emcd/aiwb'
# TODO: 'Documentation' = 'https://emcd.github.io/aiwb'
'Source Code' = 'https://github.com/emcd/aiwb'
# TODO: 'Download' = 'https://pypi.org/project/aiwb/#files'
'Issue Tracker' = 'https://github.com/emcd/aiwb/issues'

[tool.SELF]
year-of-origin = 2023

[tool.bandit]
exclude_dirs = [ 'tests' ]
skips = [
  'B113', # request_without_timeout (Httpx has default of 5 seconds.)
]

# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
command_line = '-m pytest'
data_file = '.auxiliary/caches/pytest/coverage.sqlite3'
parallel = true
source = [ 'sources', 'tests' ]
[tool.coverage.html]
directory = '.auxiliary/artifacts/coverage-pytest'
[tool.coverage.xml]
output = '.auxiliary/artifacts/coverage-pytest/coverage.xml'

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.build]
directory = '.auxiliary/artifacts/hatch-build'
[tool.hatch.build.targets.sdist]
only-include = [ 'sources/aiwb', 'data' ]
[tool.hatch.build.targets.wheel]
only-include = [ 'sources/aiwb', 'data' ]
[tool.hatch.build.targets.wheel.sources]
'sources/aiwb' = 'aiwb'
'data' = 'aiwb/data'
[tool.hatch.envs.default]
python = '3.10'
[tool.hatch.envs.develop]
description = ''' Development environment. '''
dependencies = [
  'coverage[toml]',
  'pre-commit',
  'pyright',
  'pytest',
  'ruff',

  'types-aiofiles',
  'types-jsonschema',

  # TODO: Install in environment context as needed.
  'chromadb',
  'faiss-cpu',
  'langchain-chroma',
  'langchain-community',
  'langchain-openai', # Embeddings, for now.
]
[tool.hatch.envs.develop.scripts]
linters = [
  'ruff check --quiet sources documentation tests',
  # TODO: Pyright
]
packagers = [
  'hatch build',
  # TODO? Sign packages.
]
testers = [
  'coverage erase',
  'coverage run',
  'coverage combine',
  'coverage report --skip-covered',
  'coverage html',
  'coverage xml',
]
make-all = [
  'linters',
  'testers',
  'packagers',
#  'docsgen',
]
[tool.hatch.envs.qa]
description = ''' Quality assurance environment. '''
template = 'develop'
[[tool.hatch.envs.qa.matrix]]
python = [ '3.10', '3.11', '3.12' ]
[tool.hatch.metadata]
allow-direct-references = true
[tool.hatch.version]
path = 'sources/aiwb/__init__.py'

[tool.mypy]
cache_dir = '.auxiliary/caches/mypy'
disable_error_code = [ 'attr-defined', 'import-untyped', 'name-defined', 'operator' ]
implicit_optional = true
pretty = true
#strict = true

[tool.pyright]
reportPrivateImportUsage = false
reportSelfClsParameterName = false
stubPath = 'sources/aiwb/_typedecls'

[tool.pytest.ini_options]
# Note: Cannot run doctests from Pytest, because Pytest tries to update '_'
#       attribute on protected modules. Instead, we use Sphinx to run doctests.
minversion = '8.1'
addopts = '--capture=no --exitfirst -rfE'
testpaths = [ 'tests', 'sources' ]
python_files = [ '*.py' ]
python_functions = [ 'test_[0-9][0-9][0-9]_*' ]
cache_dir = '.auxiliary/caches/pytest'

[tool.ruff]
builtins = [ 'ic', 'ictr' ]
cache-dir = '.auxiliary/caches/ruff'
indent-width = 4
line-length = 79
[tool.ruff.lint]
dummy-variable-rgx = '^_$'
ignore = [
  'E701',     # multiple-statements-on-one-line-colon
  'PLC0415',  # import-outside-top-level
  'SIM300',   # yoda-condition: scarred by assignment expressions, I am
]
select = [ # default: E4, E7, E9, F
  'A',        # Flake8 builtins rules
  'B006',     # mutable-argument-default
  'B008',     # function-call-in-default-argument
  'B011',     # assert-false
  'B023',     # function-uses-loop-variable
  'B904',     # raise-without-from-inside-except
  'B909',     # PREVIEW: loop-iterator-mutation
  'C90',      # McCabe complexity rules
  'E101',     # mixed-spaces-and-tabs
  'E111',     # PREVIEW: indentation-with-invalid-multiple
  'E112',     # PREVIEW: no-indented-block
  'E4',       # Pycodestyle import rules
  'E501',     # line-too-long
  'E7',       # Pycodestyle general rules
  'E9',       # Pycodestyle runtime errors
  'F',        # Pyflakes rules
  'PERF',     # Perflint rules
  'PLC',      # Pylint convention rules
  'PLE',      # Pylint error rules
  'PLR',      # Pylint refactor rules
  'PLW',      # Pylint warning rules
  'RET',      # Flake8 return rules
  'RUF',      # Ruff rules
  'S',        # Flake8 Bandit rules
  'SIM',      # Flake8 simplify rules
  'SLF',      # Flake8 self rules
  'TRY',      # Tryceratops rules
]
[tool.ruff.lint.mccabe]
max-complexity = 12
[tool.ruff.lint.per-file-ignores]
'__init__.py' = [
  'F401',     # unused-import
  'F403',     # undefined-local-with-import-star
  'F405',     # undefined-local-with-import-star-usage
]
'tests/**/*.py' = [
  'PLR0124',  # comparison-with-itself
  'PLR0913',  # too-many-arguments
  'PLR0915',  # too-many-statements
  'PLR1704',  # redefined-argument-from-local
  'PLR2004',  # magic-value-comparison
  'PLW0129',  # assert-on-string-literal
  'PLW0603',  # global-statement
  'PLW0642',  # self-assignment
  'S101',     # assert
  'SLF001',   # private-member-accessed
  'TRY',      # Tryceratops rules
]
[tool.ruff.lint.pylint]
max-locals = 10
max-public-methods = 10
max-statements = 30
