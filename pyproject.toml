[build-system]
requires = [ 'hatchling' ]
build-backend = 'hatchling.build'

[project]
name = 'aiwb'
description = 'Workbench for interacting with multiple AI models in various modalities.'
dynamic = [ 'version' ]
license = 'Apache-2.0'
readme = { 'file' = 'README.md', 'content-type' = 'text/markdown' }
requires-python = '>= 3.10'
dependencies = [
  'accretive',
  'aiofiles',
  'exceptiongroup', # TODO: Python 3.11: Remove.
  'fastapi[standard]',
  'gitignorefile',
  'icecream',
  'importlib-resources', # TODO: Python 3.12: Remove.
  'jsonschema', # TODO: Remove once on Pydantic models.
  'mako', # TODO? Replace with Jinja2.
  'panel ~= 1.4',
  'platformdirs',
  'pydantic',
  'python-dotenv',
  'python-magic',
  'rich',
  'tomli',
  'tomli-w', # TODO? Remove. Use pretty JSON for machine-generated files.
  'typing-extensions',
  'unstructured',

  # TODO: Install in environment context as needed.
  'anthropic',
  'openai',
  'tiktoken',
]
classifiers = [ # https://pypi.org/classifiers
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: Apache Software License',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: Implementation :: CPython',
  'Topic :: Software Development',
]
keywords = [ 'ai', 'llm', 'workbench', 'conversation' ]
[project.gui-scripts]
aiwb = 'aiwb.gui:main'
[project.optional-dependencies]
chromadb = [
  'chromadb',
  'langchain-chroma',
  'langchain-openai', # Embeddings, for now.
]
faiss-cpu = [
  'faiss-cpu',
  'langchain-community',
  'langchain-openai', # Embeddings, for now.
]
experiments = [
  'aiwb[faiss-cpu,web-scraper]',
  'notebook',
  'pytesseract',
]
web-scraper = [
  'beautifulsoup4',
  'scrapy',
]
[[project.authors]]
name = 'Eric McDonald'
email = 'emcd@users.noreply.github.com'
# TODO: [project.urls]

# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
command_line = '-m pytest'
data_file = '.local/caches/pytest/coverage.sqlite3'
parallel = true
[tool.coverage.html]
directory = '.local/artifacts/coverage-pytest'
[tool.coverage.xml]
output = '.local/artifacts/coverage-pytest/coverage.xml'

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.build]
directory = '.local/artifacts'
[tool.hatch.build.targets.sdist]
only-include = [ 'sources/aiwb', 'data' ]
[tool.hatch.build.targets.wheel]
only-include = [ 'sources/aiwb', 'data' ]
[tool.hatch.build.targets.wheel.sources]
'sources/aiwb' = 'aiwb'
'data' = 'aiwb/data'
[tool.hatch.envs.default]
python = '3.10'
[tool.hatch.envs.develop]
description = ''' Development environment. '''
dependencies = [
  'coverage[toml]',
  'pylint',
  'pytest',

  # TODO: Install in environment context as needed.
  'chromadb',
  'faiss-cpu',
  'langchain-chroma',
  'langchain-community',
  'langchain-openai', # Embeddings, for now.
]
[tool.hatch.version]
path = 'sources/aiwb/__init__.py'

# https://pylint.pycqa.org/en/latest/user_guide/configuration/index.html
[tool.pylint.main]
fail-under = 10
# TODO: jobs: Consider parallelization if output interleaving, dependency
#             grouping, and similarities detection bugs have been fixed.
load-plugins = [
  # 'pylint.extensions.bad_builtin',
  'pylint.extensions.broad_try_clause',
  'pylint.extensions.check_elif',
  'pylint.extensions.code_style',
  'pylint.extensions.confusing_elif',
  # 'pylint.extensions.consider_ternary_expression',
  'pylint.extensions.dict_init_mutate',
  'pylint.extensions.dunder',
  'pylint.extensions.eq_without_hash',
  'pylint.extensions.for_any_all',
  'pylint.extensions.magic_value',
  'pylint.extensions.mccabe',
  'pylint.extensions.no_self_use',
  'pylint.extensions.overlapping_exceptions',
  'pylint.extensions.private_import',
  'pylint.extensions.redefined_loop_name',
  'pylint.extensions.redefined_variable_type',
  # 'pylint.extensions.set_membership',
  # 'pylint.extensions.while_used',
]
recursive = false
suggestion-mode = true
[tool.pylint.basic]
const-rgx = '([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$'
good-names = [ '_', '__' ]
include-naming-hint = true
[tool.pylint.classes]
defining-attr-methods = [ '__init__', '__new__', '__post_init__' ]
exclude-protected = [ ]
valid-classmethod-first-arg = [ 'kind', 'class_' ]
valid-metaclass-classmethod-first-arg = [ 'maker', 'factory' ]
[tool.pylint.design]
# TODO: exclude-too-few-public-methods: Consider exception hierarchies.
ignored-parents = [ 'panel.reactive.ReactiveHTML', 'panel.template.base.Template' ]
max-args = 5
max-attributes = 7
max-bool-expr = 3
max-branches = 12
max-locals = 10
max-parents = 3
max-public-methods = 10
max-returns = 6
max-statements = 30
min-public-methods = 1
[tool.pylint.exceptions]
overgeneral-exceptions = [ 'builtins.BaseException', 'builtins.Exception' ]
[tool.pylint.format]
ignore-long-lines = '''^(\s*<?https?://\S+>?|([^'"]*\s+)?#.*)$'''
max-line-length = 79
max-module-lines = 800
single-line-class-stmt = true
single-line-if-stmt = true
[tool.pylint.imports]
allow-wildcard-with-all = false
# TODO: ext-import-graph
# TODO: int-import-graph
[tool.pylint.logging]
logging-format-style = 'new'
[tool.pylint.'messages control']
disable = [
  'consider-using-f-string',
  'duplicate-code',  # TODO: Re-enable after heuristic is fixed.
  'fixme',
  'f-string-without-interpolation',
  'import-outside-toplevel',
  'multiple-statements',
  'reimported',
  'too-few-public-methods',
  'ungrouped-imports',
  'use-dict-literal',
  'wrong-import-order',
  'wrong-import-position',
]
[tool.pylint.refactoring]
max-nested-blocks = 3
never-returning-functions = [ 'sys.exit', 'argparse.parse_error' ]
[tool.pylint.reports]
msg-template = '{path} {line:3d},{column:2d} [{symbol}] {msg}'
output-format = 'colorized'
reports = true
score = true
[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 5
[tool.pylint.spelling]
max-spelling-suggestions = 4
# TODO: spelling-dict
[tool.pylint.typecheck]
contextmanager-decorators = [ 'contextlib.contextmanager' ]
ignored-checks-for-mixins = [
  'attribute-defined-outside-init',
  'no-member',
  'not-async-context-manager',
  'not-context-manager',
]
#ignored-classes = [ 'thread._local', '_thread._local', 'argparse.Namespace' ]
ignore-mixin-members = false
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 2
# TODO? mixin-class-rgx
# TODO: signature-mutators
[tool.pylint.variables]
additional-builtins = [ 'ic' ]
callbacks = [ ]
dummy-variables-rgx = '''_$'''
ignored-argument-names = '''_.*'''
redefining-builtins-modules = [ 'builtins', 'io' ]

[tool.pytest.ini_options]
minversion = '8.1'
addopts = '--exitfirst -rA --doctest-modules --doctest-glob="*.rst"'
testpaths = [ 'tests', 'sources' ]
python_files = [ '*.py' ]
python_functions = [ 'test_[0-9][0-9][0-9]_*' ]
cache_dir = '.local/caches/pytest'
filterwarnings = [ 'ignore::DeprecationWarning' ]
